create table "public"."highlight" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "url" text not null,
    "color" text not null,
    "start_xpath" text not null,
    "start_offset" bigint not null,
    "end_xpath" text not null,
    "end_offset" bigint not null,
    "comment" text not null,
    "user_id" uuid not null
);


alter table "public"."highlight" enable row level security;

CREATE UNIQUE INDEX highlight_pkey ON public.highlight USING btree (id);

alter table "public"."highlight" add constraint "highlight_pkey" PRIMARY KEY using index "highlight_pkey";

alter table "public"."highlight" add constraint "highlight_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."highlight" validate constraint "highlight_user_id_fkey";

grant delete on table "public"."highlight" to "anon";

grant insert on table "public"."highlight" to "anon";

grant references on table "public"."highlight" to "anon";

grant select on table "public"."highlight" to "anon";

grant trigger on table "public"."highlight" to "anon";

grant truncate on table "public"."highlight" to "anon";

grant update on table "public"."highlight" to "anon";

grant delete on table "public"."highlight" to "authenticated";

grant insert on table "public"."highlight" to "authenticated";

grant references on table "public"."highlight" to "authenticated";

grant select on table "public"."highlight" to "authenticated";

grant trigger on table "public"."highlight" to "authenticated";

grant truncate on table "public"."highlight" to "authenticated";

grant update on table "public"."highlight" to "authenticated";

grant delete on table "public"."highlight" to "service_role";

grant insert on table "public"."highlight" to "service_role";

grant references on table "public"."highlight" to "service_role";

grant select on table "public"."highlight" to "service_role";

grant trigger on table "public"."highlight" to "service_role";

grant truncate on table "public"."highlight" to "service_role";

grant update on table "public"."highlight" to "service_role";

create policy "Enable users to delete their own data only"
on "public"."highlight"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to insert their own data only"
on "public"."highlight"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to update their own data only"
on "public"."highlight"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."highlight"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



